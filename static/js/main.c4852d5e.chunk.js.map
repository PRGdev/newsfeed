{"version":3,"sources":["logo.svg","components/sidebar.js","components/articles.js","components/main.js","config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Sidebar","sources","fetchSource","source","length","map","s","k","contentType","key","className","style","background","id","onClick","name","Articles","articles","a","href","url","target","rel","title","Main","useState","setSources","setArticles","setSource","axios","get","then","res","data","useEffect","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,6NC0B5BC,MAxBf,YAAoD,IAAjCC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,OACvC,OAAKF,EAAQG,OAGX,oCACGH,EAAQI,KAAI,SAACC,EAAGC,GACf,MAAoB,SAAhBD,EAAEE,YAA6B,KAEjC,uBACAC,IAAKF,EACHG,UAAU,OACtBC,MAAO,CAACC,WAAYN,EAAEO,KAAKV,EAAS,OAAQ,eAChCW,QAAS,WACPZ,EAAYI,EAAEO,MAGfP,EAAES,UAfe,0CCefC,MAhBf,YAAiC,IAAbC,EAAY,EAAZA,SAClB,OAAKA,EAASb,OAGZ,oCACGa,EAASZ,KAAI,SAACa,EAAGX,GAChB,OACE,uBAAGG,UAAU,OAAOD,IAAKF,GACvB,uBAAGY,KAAMD,EAAEE,IAAKC,OAAO,SAASC,IAAI,uBAAuBJ,EAAEK,YAP1C,0C,gBCoChBC,MA/Bf,WAAiB,IAAD,EACgBC,mBAAS,IADzB,mBACPxB,EADO,KACEyB,EADF,OAEkBD,mBAAS,IAF3B,mBAEPR,EAFO,KAEGU,EAFH,OAGcF,mBAAS,IAHvB,mBAGPtB,EAHO,KAGCyB,EAHD,KAMR1B,EAAc,SAAAW,GAClBe,EAAUf,GACVc,EAAY,IACZE,IAAMC,IAAN,UChBqB,qCDgBrB,mBAAiCjB,IAAMkB,MAAK,SAAAC,GAC1CL,EAAYK,EAAIC,UASpB,OANAC,qBAAU,WACRL,IAAMC,ICtBiB,yCDsBAC,MAAK,SAAAC,GAC1BN,EAAWM,EAAIC,SAEjB/B,EAAY,8BACX,IAED,yBAAKQ,UAAU,QACb,yBAAKA,UAAU,yBACb,kBAAC,EAAD,CAASP,OAAQA,EAAQF,QAASA,EAASC,YAAaA,KAE1D,yBAAKQ,UAAU,yBACb,kBAAC,EAAD,CAAUO,SAAUA,OEHbkB,MAxBf,WACE,OACE,yBAAKzB,UAAU,OACf,yBAAKA,UAAU,WACf,kBAAC,EAAD,OAEE,4BAAQA,UAAU,cAChB,yBAAK0B,IAAKC,IAAM3B,UAAU,WAAW4B,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACE5B,UAAU,WACVS,KAAK,sBACLE,OAAO,SACPC,IAAI,uBAJN,kBCLYiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c4852d5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nfunction Sidebar({ sources, fetchSource, source }) {\r\n  if (!sources.length) return <p>Loading...</p>\r\n\r\n  return (\r\n    <>\r\n      {sources.map((s, k) => {\r\n        if (s.contentType!==\"news\") return null;\r\n        return (\r\n          <p\r\n          key={k}\r\n            className=\"mb-3\"\r\nstyle={{background: s.id===source ? \"#ccc\": \"transparent\"}}\r\n            onClick={() => {\r\n              fetchSource(s.id);\r\n            }}\r\n          >\r\n            {s.name}\r\n          </p>\r\n        );      \r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Sidebar;","import React from \"react\";\r\n\r\nfunction Articles({ articles }) {\r\n  if (!articles.length) return <p>Loading...</p>\r\n\r\n  return (\r\n    <>\r\n      {articles.map((a, k) => {\r\n        return (\r\n          <p className=\"mb-4\" key={k}>\r\n            <a href={a.url} target=\"_blank\" rel=\"noopener noreferrer\">{a.title}</a>\r\n          </p>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Articles;","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Sidebar from \"./sidebar\";\r\nimport Articles from \"./articles\";\r\nimport { SOURCES_URL, FEEDS_URL } from \"../config\";\r\n\r\nimport axios from \"axios\";\r\n\r\nfunction Main() {\r\n  const [sources, setSources] = useState([]);\r\n  const [articles, setArticles] = useState([]);\r\n  const [source, setSource] = useState([]);\r\n\r\n\r\n  const fetchSource = id => {\r\n    setSource(id);\r\n    setArticles([]);\r\n    axios.get(`${FEEDS_URL}?source=${id}`).then(res => {\r\n      setArticles(res.data);\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    axios.get(SOURCES_URL).then(res => {\r\n      setSources(res.data);\r\n    });\r\n    fetchSource(\"5718e53e7a84fb1901e05928\");\r\n  }, []);\r\n  return (\r\n    <div className=\"flex\">\r\n      <div className=\"w-1/4 bg-gray-500 p-3\">\r\n        <Sidebar source={source} sources={sources} fetchSource={fetchSource} />\r\n      </div>\r\n      <div className=\"w-3/4 bg-gray-400 p-3\">\r\n        <Articles articles={articles} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;","export const SOURCES_URL = \"https://medrum.herokuapp.com/sources/\"\r\nexport const FEEDS_URL = \"https://medrum.herokuapp.com/feeds\"","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport \"./styles.css\";\nimport Main from \"./components/main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <div className=\"wrapper\">\n    <Main/>\n  </div>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}